// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/dashboard/appointments/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/appointments">> = Specific
  const handler = {} as typeof import("../../app/dashboard/appointments/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/coupons/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/coupons">> = Specific
  const handler = {} as typeof import("../../app/dashboard/coupons/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/daily-usage/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/daily-usage">> = Specific
  const handler = {} as typeof import("../../app/dashboard/daily-usage/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/marketing/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/marketing">> = Specific
  const handler = {} as typeof import("../../app/dashboard/marketing/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../app/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/patients/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/patients">> = Specific
  const handler = {} as typeof import("../../app/dashboard/patients/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/revenue/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/revenue">> = Specific
  const handler = {} as typeof import("../../app/dashboard/revenue/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/services/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/services">> = Specific
  const handler = {} as typeof import("../../app/dashboard/services/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/settings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/settings">> = Specific
  const handler = {} as typeof import("../../app/dashboard/settings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/staff/appointments/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/staff/appointments">> = Specific
  const handler = {} as typeof import("../../app/staff/appointments/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/staff/booking/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/staff/booking">> = Specific
  const handler = {} as typeof import("../../app/staff/booking/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/staff/daily-input/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/staff/daily-input">> = Specific
  const handler = {} as typeof import("../../app/staff/daily-input/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/staff/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/staff">> = Specific
  const handler = {} as typeof import("../../app/staff/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/staff/patients/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/staff/patients">> = Specific
  const handler = {} as typeof import("../../app/staff/patients/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/staff/profile/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/staff/profile">> = Specific
  const handler = {} as typeof import("../../app/staff/profile/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/staff/reception/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/staff/reception">> = Specific
  const handler = {} as typeof import("../../app/staff/reception/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/staff/revenue-input/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/staff/revenue-input">> = Specific
  const handler = {} as typeof import("../../app/staff/revenue-input/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/staff/services/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/staff/services">> = Specific
  const handler = {} as typeof import("../../app/staff/services/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/test-supabase/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/test-supabase">> = Specific
  const handler = {} as typeof import("../../app/test-supabase/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/health/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/health">> = Specific
  const handler = {} as typeof import("../../app/api/health/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/dashboard/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../app/dashboard/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/staff/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/staff">> = Specific
  const handler = {} as typeof import("../../app/staff/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
